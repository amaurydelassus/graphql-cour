datasource db {
  provider = "postgresql"
  url      = "postgresql://adelassus@localhost:5432/task-manager-graphql?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
  emitIdAsIDType = true
  simpleResolvers = true
}

model User {
    id              String  @id @default(cuid())
    name            String
    /// @TypeGraphQL.omit(output: true)
    password        String
    /// @TypeGraphQL.omit(output: true, input: true)
    password_digest String
    last_sign_in_at DateTime
    created_at      DateTime
    update_at       DateTime
    tasks Task[]
    comments Comment[]
    assignees Assignee[]
    notifications Notification[]
}

model Notification {
  id              String  @default(cuid()) @id
  target_user     User @relation(fields: [userId], references: [id])
  userId          String
  target_action   Action @relation(fields: [actionId], references: [id])
  actionId        String
  readed_at       DateTime
}

model Assignee {
  id              String  @default(cuid()) @id
  target_user     User @relation(fields: [userId], references: [id])
  userId          String
  target_task     Task @relation(fields: [taskId], references: [id])
  taskId          String
  created_at      DateTime @default(now())

  @@index([userId,taskId])
}

model Action {
  id              String  @default(cuid()) @id
  group           GroupActionsTaskManagerEnums
  name            NameActionsTaskManagerEnums
  created_at      DateTime
  target_id       String
  target_type     TargetTypeActionTaskManagerEnums
  notifications   Notification[]
}

model Comment {
  id              String  @default(cuid()) @id
  owner           User?    @relation(fields: [owner_id], references: [id])
  owner_id        String?
  target          Task     @relation(fields: [target_id], references: [id])
  target_id       String
  target_type     TargetTypeActionTaskManagerEnums
  parent_id       Int
  content         String
  created_at      DateTime @default(now())
  updated_at      DateTime
}

model Task {
  id              String  @default(cuid()) @id
  title           String
  description     String
  owner           User    @relation(fields: [owner_id], references: [id])
  owner_id        String
  due_at          DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime
  state           StateTaskTaskManagerEnums
  comments Comment[]
  assignee Assignee[]
}

enum GroupActionsTaskManagerEnums {
  noUp
  up
  admin
}

enum NameActionsTaskManagerEnums {
    assigTask
    commentInAssingTask
    replayToTask
    taskEnd
    deadlineNearing
}

enum StateTaskTaskManagerEnums {
    assigTask
    commentInAssingTask
    replayToTask
    taskEnd
    deadlineNearing
}

enum TargetTypeActionTaskManagerEnums {
    user
    admin
}